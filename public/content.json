{"meta":{"title":"gavinsocu","subtitle":"","description":"gavin的博客","author":"gavinccc","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-06-24T12:53:59.885Z","updated":"2023-06-24T12:53:59.885Z","comments":true,"path":"custom/darkmode.js","permalink":"http://example.com/custom/darkmode.js","excerpt":"","text":"function BackTOP() { $(\"#btn\").hide(); $(function () { $(window).scroll(function () { if ($(window).scrollTop() > 50) { $(\"#btn\").fadeIn(200); } else { $(\"#btn\").fadeOut(200); } }); $(\"#btn\").click(function () { $('body,html').animate({ scrollTop: 0 }, 500); return false; }); }); $(function () { $(\"#say\").click(function () { $('body,html').animate({ scrollTop: $('html, body').get(0).scrollHeight }, 500); return false; }); }) } $('#readmode').click(function () { $('body').toggleClass('read-mode') }) function SiderMenu() { $('#main-container').toggleClass('open'); $('.iconflat').css('width', '50px').css('height', '50px'); $('.openNav').css('height', '50px'); $('#main-container,#mo-nav,.openNav').toggleClass('open') } function switchNightMode() { $('').appendTo($(\"body\")), setTimeout( function () { (volantis.dark.mode == \"dark\") ? ($(\"html\").addClass(\"DarkMode\"), $('#modeicon').attr(\"xlink:href\", \"#icon-sun\")) : ($(\"html\").removeClass(\"DarkMode\"), $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\")), setTimeout(function () { $(\".Cuteen_DarkSky\").fadeOut(1e3, function () { $(this).remove() }) }, 2e3) }), 50 } function checkNightMode() { if ($(\"html\").hasClass(\"n-f\")) { $(\"html\").removeClass(\"day\"); $(\"html\").addClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-sun\") return; } if ($(\"html\").hasClass(\"d-f\")) { $(\"html\").removeClass(\"DarkMode\"); $(\"html\").addClass(\"day\"); $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\") return; } if (volantis.dark.mode == \"dark\") { $(\"html\").addClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-sun\") } else { $(\"html\").removeClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\") } } BackTOP(); volantis.dark.push(switchNightMode);"},{"title":"","date":"2023-06-24T12:54:15.311Z","updated":"2023-06-24T12:54:15.311Z","comments":true,"path":"custom/darkmode.css","permalink":"http://example.com/custom/darkmode.css","excerpt":"","text":"#RightDownBtn { position: fixed; left: 1.875rem; bottom: 1.875rem; padding: 0.3125rem 0.625rem; background: #fff; border-radius: 0.1875rem; transition: 0.3s ease all; z-index: 1; align-items: flex-end; flex-direction: column; display: -moz-flex; display: flex; float: right; } #RightDownBtn>a, #RightDownBtn>label { width: 1.5em; height: 1.5em; margin: 0.3125rem 0; transition: .2s cubic-bezier(.25, .46, .45, .94); } /* font color */ .DarkMode #page, .DarkMode #colophon, .DarkMode #vcomments .vbtn, .DarkMode .art-content #archives .al_mon_list .al_mon, .DarkMode .art-content #archives .al_mon_list span, .DarkMode body, .DarkMode .art-content #archives .al_mon_list .al_mon, .DarkMode .art-content #archives .al_mon_list span, .DarkMode button, .DarkMode .art .art-content #archives a, .DarkMode textarea, .DarkMode strong, .DarkMode a, .DarkMode p, .DarkMode li, .DarkMode .label { color: rgba(255, 255, 255, .6); } .DarkMode #page, .DarkMode body, .DarkMode #colophon, .DarkMode #main-container, .DarkMode #page .yya, .DarkMode #content, .DarkMode #contentss, .DarkMode #footer { background-color: #292a2d; } .DarkMode strong, .DarkMode img { filter: brightness(.7); } /* sun and noon */ .Cuteen_DarkSky, .Cuteen_DarkSky:before { content: \"\"; position: fixed; left: 0; right: 0; top: 0; bottom: 0; z-index: 88888888 } .Cuteen_DarkSky { background: linear-gradient(#feb8b0, #fef9db) } .Cuteen_DarkSky:before { transition: 2s ease all; opacity: 0; background: linear-gradient(#4c3f6d, #6c62bb, #93b1ed) } .DarkMode .Cuteen_DarkSky:before { opacity: 1 } .Cuteen_DarkPlanet { z-index: 99999999; position: fixed; left: -50%; top: -50%; width: 200%; height: 200%; -webkit-animation: CuteenPlanetMove 2s cubic-bezier(.7, 0, 0, 1); animation: CuteenPlanetMove 2s cubic-bezier(.7, 0, 0, 1); transform-origin: center bottom } @-webkit-keyframes CuteenPlanetMove { 0% { transform: rotate(0) } to { transform: rotate(360deg) } } @keyframes CuteenPlanetMove { 0% { transform: rotate(0) } to { transform: rotate(360deg) } } .Cuteen_DarkPlanet:after { position: absolute; left: 35%; top: 40%; width: 9.375rem; height: 9.375rem; border-radius: 50%; content: \"\"; background: linear-gradient(#fefefe, #fffbe8) }"},{"title":"","date":"2023-07-02T17:57:32.913Z","updated":"2023-07-02T17:57:32.913Z","comments":true,"path":"custom/binft.js","permalink":"http://example.com/custom/binft.js","excerpt":"","text":"var binft = function (r) { var isTransparent = true; function getRandomColor() { if(isTransparent){ isTransparent = false; //此处修改字体颜色,最后的 0 和 1 不要改 return \"rgba(255,255,255,0)\" }else{ isTransparent = true; return \"rgba(255,255,255,1)\" } } function n(r) { for (var n = document.createDocumentFragment(), i = 0; r > i; i++) { var oneword = document.createElement(\"span\"); oneword.textContent = \"_\"; // 此处是末尾字符,如果想用光标样式可以改为\"|\" oneword.style.color = getRandomColor(); n.appendChild(oneword); } return n } function i() { var t = wordList[c.skillI]; c.step ? c.step-- : (c.step = refreshDelayTime, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : \"forward\" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = \"backward\", c.delay = showTotalWordDelayTime) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % wordList.length, c.direction = \"forward\")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(maxLength, maxLength + c.prefixP) : Math.min(maxLength, t.length - c.skillP))), setTimeout(i, d) } var l = \"\", //此处改成你自己的诗词 wordList = [ \"有花堪折直需折,莫待无花空折枝.\", \"闲居少邻并,草径入荒园.鸟宿池边树,僧敲月下门.\", \"侯门一入深如海,从此萧郎是路人.\", \"才见岭头云似盖,已惊岩下雪如尘.\", \"人间万事消磨尽,只有清香似旧时.\", \"日暮酒醒人已远,满天风雨下西楼.\", \"落灯花,棋未收,叹新丰逆旅淹留.\", \"软风吹过窗纱,心期便隔天涯.\", \"迷惑失故路,薄暮无宿栖.\", \"不见白头相携老,只许与君共天明.\", \"晓迎秋露一枝新,不占园中最上春.\", \"荷尽已无擎雨盖,菊残犹有傲霜枝.\", \"春未绿,鬓先丝.人间别久不成悲.\", \"江东子弟多才俊,卷土重来未可知.\", \"莫听穿林打叶声,何妨吟啸且徐行.\", \"在天愿作比翼鸟,在地愿为连理枝.\", ].map(function (r) { return r + \"\" }), showTotalWordDelayTime = 2, refreshDelayTime = 1, maxLength = 1, d = 75, c = { text: \"\", prefixP: -maxLength, skillI: 0, skillP: 0, direction: \"forward\", delay: showTotalWordDelayTime, step: refreshDelayTime }; i() }; binft(document.getElementById('binft'));"},{"title":"Myfriends","date":"2023-06-24T18:44:26.815Z","updated":"2023-06-24T18:44:26.815Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"感恩","text":"感恩"},{"title":"","date":"2023-06-24T14:28:50.251Z","updated":"2023-06-24T14:28:50.251Z","comments":true,"path":"mylist/index.html","permalink":"http://example.com/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-06-24T14:29:20.653Z","updated":"2023-06-24T14:29:20.653Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2023-06-24T14:29:59.613Z","updated":"2023-06-24T14:29:59.613Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-06-24T14:30:30.439Z","updated":"2023-06-24T14:30:30.439Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"","date":"2023-07-02T04:53:14.092Z","updated":"2023-07-02T04:53:14.092Z","comments":true,"path":"htmll/renwu.html","permalink":"http://example.com/htmll/renwu.html","excerpt":"","text":"作业 点一下 function jis(){ setTimeout(function(){ document.getElementById(\"bb\").className='jianbian' },10000) } function abc(){ var x=document.getElementById(\"ddd\") var a=\"\" a=Math.floor(Math.random()*900)+100; document.getElementById(\"ccc\").innerHTML=a if(a>600){ x.innerHTML=\"中奖啦！！！\" }else{ x.innerHTML=\"\" } } *{ margin: 0; padding: 0; } #bb{ width: 100%; height: 814px; margin: 0px auto; text-align: center; } button{ font-size: 20px; color: black; width: 100px; height: 30px; margin-top: 10%; background-image: linear-gradient(to left, #f1aee4, #d7baf4, #bfc5fa, #aecef7, #a9d4ee); border-radius: 2px; border: 2px; border-color: black; } .xuanfu:hover{ box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19); } #ccc{ font-size: 300px; } .jianbian{ background-image: linear-gradient(to right top, #e79bc6, #c98ebf, #aa82b6, #8b77aa, #6c6b9c, #586c9c, #436d9a, #2a6d95, #017a9b, #00869d, #00929b, #159d94); }"}],"posts":[{"title":"gpt","slug":"gpt","date":"2023-07-24T14:07:58.000Z","updated":"2023-07-24T14:10:54.227Z","comments":true,"path":"2023/07/24/gpt/","link":"","permalink":"http://example.com/2023/07/24/gpt/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"VUE","slug":"VUE","date":"2023-07-21T18:04:34.237Z","updated":"2023-07-23T14:59:38.438Z","comments":true,"path":"2023/07/22/VUE/","link":"","permalink":"http://example.com/2023/07/22/VUE/","excerpt":"","text":"展现vuevue，数据响应式 一般在index.js里写一个new vue var vm = new vue&#123; el://放选择器 date://放数据 &#125;","categories":[],"tags":[]},{"title":"3D建模","slug":"3D建模","date":"2023-07-11T14:53:32.000Z","updated":"2023-07-15T04:37:45.565Z","comments":true,"path":"2023/07/11/3D建模/","link":"","permalink":"http://example.com/2023/07/11/3D%E5%BB%BA%E6%A8%A1/","excerpt":"","text":"安装包获取SolidWorks2021 详细安装教程，百度网盘链接：https://pan.baidu.com/s/1UUAsVRxzJ0ga7q654ZGp7Q提取码：jlbp 安装步骤step1 解压压缩文件：压缩密码为rjzkgzh双击运行，点击是，点击确定。注册表注册成功后 step2 解压完成，在D:\\Soildworks2021\\SW21_CN_x64\\SW21_CN_x64\\SW21_CN_x64_SolidSQUAD_目录下找到 step3 继续在该目录下然后在C盘或D盘（最好在C盘）新建一个SolidWorks文件夹存放，并双击打开该文件夹，然后 step4 断开网络，关闭防火墙等安全防护 step5 在解压后的文件夹中找到双击进入：找到setup文件默认下一步后，在此处下一步在检索的时候一定要断开网络提示：点击取消后进入下一步可以更改安装目录，文件比较大安装完成后：不要运行软件 step6（直接看下方更改路径后的操作） 若是自己更改过安装路径，双击打开压缩包解压后的“SolidWorks2020”文件夹里面的“SolidSQUAD”文件夹，双击打开“Program Files”文件夹，双击打开“SOLIDWORKS Corp”文件夹，全选“SOLIDWORKS Corp”文件夹中的所有内容，然后鼠标右击选择“复制”。复制后找到安装路径下的粘贴替换即可 step7 双击打开压缩包解压后的“SolidWorks2020”文件夹里面的“SolidSQUAD”文件夹，双击“SolidSQUADLoaderEnabler” 上文来源CSDN","categories":[],"tags":[{"name":"3D建模","slug":"3D建模","permalink":"http://example.com/tags/3D%E5%BB%BA%E6%A8%A1/"}]},{"title":"从51到32","slug":"从51到32","date":"2023-07-08T01:52:35.000Z","updated":"2023-07-11T12:09:48.356Z","comments":true,"path":"2023/07/08/从51到32/","link":"","permalink":"http://example.com/2023/07/08/%E4%BB%8E51%E5%88%B032/","excerpt":"","text":"c语言程序入门应用关键字与数据类型 #include &#x3D;&gt; 包含头文件头文件预处理在源文件与编译器之间#define &#x3D;&gt; 宏定义一般在头部，将c中某关键字进行替换 32个关键字，编译器预先定义了有一定物理意义的字符串 &#x3D;&gt;不同编译器有不&gt;同的定义sizeof 也是关键字:查看变量在内存空间中容量的工具，用法sizeof(变量)通&gt;过关键字定义的不同数据类型的变量，限制变量 (资源)的大小(e.g.4字节，2字节…) c中的数据类型有明确规范，无论输入还是输出都要标明 %d 十进制有符号整数 %u 十进制无符号整数 %f 浮点数 %s 字符串 %c 单个字符 %p 指针的值 %e 指数形式的浮点数 %x, %X 无符号以十六进制表示的整数 %o 无符号以八进制表示的整数 %g 把输出的值按照 %e 或者 %f 类型中输出长度较小的方式输出 %p 输出地址符 %lu 32位无符号整数 %llu 64位无符号整数 %% 输出百分号字符本身。 除了格式化说明符之外，printf() 函数还支持一些标志和选项，用于控制输出的精度、宽度、填充字符和对齐方式等。例如： %-10s：左对齐并占用宽度为 10 的字符串； %5.2f：右对齐并占用宽度为 5，保留两位小数的浮点数； %#x：输出带有 0x 前缀的十六进制数。 局部变量、全局变量、静态变量对于单一文件而言的:局部变量、全局变量、静态变量 局部变量:定义在函数内部的变量&#x3D;&gt;代码块作用域全局变量:定义在函数外部的变量&#x3D;&gt;文件作用域静态变量:有static修饰的变量有很多种组合，不需要都搞清楚，等遇到了再分析: where (可见性)?&amp; static (生命周期)? 下面这个例子很好的展示了这一点并且展示了冒泡排序示例 123456789101112131415161718192021222324252627282930313233#include&lt;stdio.h&gt;int main()&#123; int class[10]; for (int i = 0; i &lt; 10; i++) // 循环输入10次 &#123; scanf(&quot;%d&quot;,&amp;class[i]); &#125; printf(&quot;你输入了：&quot;); for (int j = 0; j &lt; 10; j++) //遍历数组并输出 &#123; printf(&quot;%d &quot;,class[j]); &#125; for (int i = 0; i &lt; 10; i++) //冒泡排序 &#123; for (int j = 0; j &lt; 10; j++) &#123; if (class[j+1]&gt;class[j]) &#123; int null = class[j]; class[j] = class[j+1]; class[j+1] = null; &#125; &#125; &#125; printf(&quot;\\n&quot;); for (int j = 0; j &lt; 10; j++) //遍历排序好的数组并输出 &#123; printf(&quot;排第%d的数是%d\\n&quot;,j+1,class[j]); &#125; &#125; 数组例：char a[]:{} 当char中使用中文时，应该是二维数组 1char wday[7][7] = &#123;&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;,&quot;星期天&quot;&#125;; 注意事项 int a[]&#x3D;{…..}; 可以在定义的时候给出初始值。可省略。 int b[][5]&#x3D;{…}; 同上，但是第二个不能省略。 a[]&#x3D;3; 这样做就不对了，里面没有定位，不能省略。 b[][2]&#x3D;2; 同上，不能省略。 a[x]&#x3D;3；这样做也对，但是要保证变量x的值正确。C不会自动给你查越界。 以下例子很好的展示数组 12345678910111213141516171819202122232425#include &lt;stdio.h&gt;void main()&#123; int tick = 0; //0~86399 short mouth[12] = &#123;31,29,31,30,31,30,31,31,30,31,30,31&#125;; short date; short yue; short week; char wday[][7] = &#123;&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;,&quot;星期天&quot;&#125;; printf(&quot;请输入一个在 1~366 区间的数\\n&quot;); scanf_s(&quot;%d&quot;, &amp;tick); week = (tick+8)%7 ; //这个应该不会错的 date = tick; for (int i = 0; i &lt; 12; i++) //依次遍历，一旦小于等于0，则该次遍历为月份 &#123; tick = tick - mouth[i]; if (tick&lt;=0)&#123;yue=i+1;break;&#125;; &#125; for (int j = 0; j &lt; yue; j++) //遍历之后获得减掉前面月份天数的值，即为当月日期 &#123; date= date-mouth[j-1]; &#125; printf(&quot;当前日期为: 20-%02d-%02d-%s\\n&quot;, yue, date, wday[week]); &#125; 枚举说实话还是不太理解 枚举方法： 1、先定义枚举类型，再定义枚举变量 12345enum DAY&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125;;enum DAY day; 这里的DAY是枚举名 2、定义枚举类型的同时定义枚举变量 1234enum DAY&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125; day; 3、省略枚举名称，直接定义枚举变量 1234enum&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125; day; 可以使用typedef定义别名 12345typedef enum&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125; day;day day1 day2; 其中day是这个枚举名的别名，提高代码可读性 下面这串代码很好的展示了枚举的应用 1234567891011121314#include &lt;stdio.h&gt; enum DAY&#123; MON=1, TUE, WED, THU, FRI, SAT, SUN&#125;; int main()&#123; enum DAY day; day = WED; printf(&quot;%d&quot;,day); return 0;&#125; 枚举经常与switch一同使用下面的代码展示了这种情况 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123; enum color &#123; red=1, green, blue &#125;; enum color favorite_color; /* 用户输入数字来选择颜色 */ printf(&quot;请输入你喜欢的颜色: (1. red, 2. green, 3. blue): &quot;); scanf(&quot;%u&quot;, &amp;favorite_color); /* 输出结果 */ switch (favorite_color) &#123; case red: printf(&quot;你喜欢的颜色是红色&quot;); break; case green: printf(&quot;你喜欢的颜色是绿色&quot;); break; case blue: printf(&quot;你喜欢的颜色是蓝色&quot;); break; default: printf(&quot;你没有选择你喜欢的颜色&quot;); &#125; return 0;&#125; 补充 在所有教科书与c规范中，switch都是不允许case后接范围的，但是在最新的GNU C进行了扩展可以使用case min … max这种用法表示范围（英文句号，前后有空格） 示例 123456789101112131415#include&lt;stdio.h&gt;int main()&#123; int i; scanf( &quot;%d&quot;,&amp;i); switch (i) &#123; case 1 ... 3: printf(&quot;niubi\\n&quot;); break; default: break; &#125;&#125; 指针C语言中几乎最重要的地方来了，难度较大，必须掌握 菜鸟教程 1234567891011#include &lt;stdio.h&gt; int main ()&#123; int var_runoob = 10; int *p; // 定义指针变量 p = &amp;var_runoob; printf(&quot;var_runoob 变量的地址： %p\\n&quot;, p); return 0;&#125; &amp;取址*取值 数组名即指针！！ 指针控制数组 结构体与枚举有点相似为了使有关联性的变量变得更加易控，也为了提高可读性，结构体因此而生 结构体定义 1234567struct Stuructstudent&#123; int num; char name; char sex; int age&#125;;//声明结构体Structstudent student1;//定义变量","categories":[],"tags":[{"name":"从51到32","slug":"从51到32","permalink":"http://example.com/tags/%E4%BB%8E51%E5%88%B032/"}]},{"title":"前端+","slug":"前端","date":"2023-07-07T10:31:49.000Z","updated":"2023-07-10T18:47:54.227Z","comments":true,"path":"2023/07/07/前端/","link":"","permalink":"http://example.com/2023/07/07/%E5%89%8D%E7%AB%AF/","excerpt":"","text":"事件循环浏览器的进程模型何为进程？程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程 每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。 何为线程？有了进程后，就可以运行程序的代码了。 运行代码的「人」称之为「线程」。 一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。当主线程结束时，进程也相应结束 如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。 浏览器有哪些进程和线程？浏览器是一个多进程多线程的应用程序 浏览器内部工作极其复杂。 为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。 可以在浏览器的任务管理器中查看当前的所有进程 其中，最主要的进程有： 浏览器进程 主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。 网络进程 负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。 渲染进程（本节课重点讲解的进程） 渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。 默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。 将来该默认模式可能会有所改变，有兴趣的同学可参见chrome官方说明文档 渲染主线程是如何工作的？渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于： 解析 HTML 解析 CSS 计算样式 布局 处理图层 每秒把页面画 60 次 执行全局 JS 代码 执行事件处理函数 执行计时器的回调函数 …… 思考题：为什么渲染进程不适用多个线程来处理这些事情？ 要处理这么多的任务，主线程遇到了一个前所未有的难题：如何调度任务？ 比如： 我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗？ 我正在执行一个 JS 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗？ 浏览器进程通知我“用户点击了按钮”，与此同时，某个计时器也到达了时间，我应该处理哪一个呢？ …… 渲染主线程想出了一个绝妙的主意来处理这个问题：排队 在最开始的时候，渲染主线程会进入一个无限循环 每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。 其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务 这样一来，就可以让每个任务有条不紊的、持续的进行下去了。 整个过程，被称之为事件循环（消息循环） 若干解释何为异步？代码在执行过程中，会遇到一些无法立即处理的任务，比如： 计时完成后需要执行的任务 —— setTimeout、setInterval 网络通信完成后需要执行的任务 – XHR、Fetch 用户操作后需要执行的任务 – addEventListener 如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」 渲染主线程承担着极其重要的工作，无论如何都不能阻塞！ 因此，浏览器选择异步来解决这个问题 使用异步的方式，渲染主线程永不阻塞 面试题：如何理解 JS 的异步？ 参考答案： JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。 而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。 如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。 所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。 在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。 JS为何会阻碍渲染？先看代码 1234567891011121314151617&lt;h1&gt;Mr.Yuan is awesome!&lt;/h1&gt;&lt;button&gt;change&lt;/button&gt;&lt;script&gt; var h1 = document.querySelector(&#x27;h1&#x27;); var btn = document.querySelector(&#x27;button&#x27;); // 死循环指定的时间 function delay(duration) &#123; var start = Date.now(); while (Date.now() - start &lt; duration) &#123;&#125; &#125; btn.onclick = function () &#123; h1.textContent = &#x27;陈广文很帅！&#x27;; delay(3000); &#125;;&lt;/script&gt; 点击按钮后，会发生什么呢？ &lt;见具体演示&gt; 任务有优先级吗？任务没有优先级，在消息队列中先进先出 但消息队列是有优先级的 根据 W3C 的最新解释: 每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。 浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint 随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法 在目前 chrome 的实现中，至少包含了下面的队列： 延时队列：用于存放计时器到达后的回调任务，优先级「中」 交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」 微队列：用户存放需要最快执行的任务，优先级「最高」 添加任务到微队列的主要方式主要是使用 Promise、MutationObserver 例如： 12// 立即把一个函数添加到微队列Promise.resolve().then(函数) 浏览器还有很多其他的队列，由于和我们开发关系不大，不作考虑 面试题：阐述一下 JS 的事件循环 参考答案： 事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。 在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。 过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。 根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。 面试题：JS 中的计时器能做到精确计时吗？为什么？ 参考答案： 不行，因为： 计算机硬件没有原子钟，无法做到精确计时 操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差 按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差 受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差 浏览器渲染过程浏览器是如何渲染页面的？当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。 在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。 整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画 每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。 这样，整个渲染流程就形成了一套组织严密的生产流水线。 渲染的第一步是解析 HTML。 解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。 css与js是完全不同的 如果主线程解析到link位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。 如果主线程解析到script位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。 第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。 渲染的下一步是样式计算。 主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。 在这一过程中，很多预设值会变成绝对值，比如red会变成rgb(255,0,0)；相对单位会变成绝对单位，比如em会变成px 这一步完成后，会得到一棵带有样式的 DOM 树。 接下来是布局，布局完成后会得到布局树。 布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。 大部分时候，DOM 树和布局树并非一一对应。 比如display:none的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。 下一步是分层 主线程会使用一套复杂的策略对整个布局树中进行分层。 分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。 滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过will-change属性更大程度的影响分层结果。 再下一步是绘制 主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。 再来是分块 完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。 合成线程首先对每个图层进行分块，将其划分为更多的小区域。 它会从线程池中拿取多个线程来完成分块工作。 分块完成后，进入光栅化阶段。 合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。 GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。 光栅化的结果，就是一块一块的位图 最后一个阶段就是画了 合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。 指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。 变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因。 合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。 完整流程 什么是 reflow？reflow 的本质就是重新计算 layout 树。 当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。 为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。 也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。 浏览器在反复权衡下，最终决定获取属性立即 reflow。 什么是 repaint？repaint 的本质就是重新根据分层信息计算了绘制指令。 当改动了可见样式后，就需要重新计算，会引发 repaint。 由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。 为什么 transform 的效率高？因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段 由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。 CSS 之包含块 上文说到布局树的几何计算会算出css包含块，以下是css包含块的详细解释 一说到 CSS 盒模型，这是很多小伙伴耳熟能详的知识，甚至有的小伙伴还能说出 border-box 和 content-box 这两种盒模型的区别。 但是一说到 CSS 包含块，有的小伙伴就懵圈了，什么是包含块？好像从来没有听说过这玩意儿。 好吧，如果你对包含块的知识一无所知，那么系好安全带，咱们准备出发了。 包含块英语全称为containing block，实际上平时你在书写 CSS 时，大多数情况下你是感受不到它的存在，因此你不知道这个知识点也是一件很正常的事情。但是这玩意儿是确确实实存在的，在 CSS 规范中也是明确书写了的： https://drafts.csswg.org/css2/#containing-block-details 并且，如果你不了解它的运作机制，有时就会出现一些你认为的莫名其妙的现象。 那么，这个包含块究竟说了什么内容呢？ 说起来也简单，就是元素的尺寸和位置，会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值（比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。 来吧，少年，让我们从最简单的 case 开始看。 12345&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 12345678910.container&#123; width: 500px; height: 300px; background-color: skyblue;&#125;.item&#123; width: 50%; height: 50%; background-color: red;&#125; 请仔细阅读上面的代码，然后你认为 div.item 这个盒子的宽高是多少？ 相信你能够很自信的回答这个简单的问题，div.item 盒子的 width 为 250px，height 为 150px。 这个答案确实是没有问题的，但是如果我追问你是怎么得到这个答案的，我猜不了解包含块的你大概率会说，因为它的父元素 div.container 的 width 为 500px，50% 就是 250px，height 为 300px，因此 50% 就是 150px。 这个答案实际上是不准确的。正确的答案应该是，div.item 的宽高是根据它的包含块来计算的，而这里包含块的大小，正是这个元素最近的祖先块元素的内容区。 因此正如我前面所说，很多时候你都感受不到包含块的存在。 包含块分为两种，一种是根元素（HTML 元素）所在的包含块，被称之为初始包含块（initial containing block）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。 另外一种是对于非根元素，对于非根元素的包含块判定就有几种不同的情况了。大致可以分为如下几种： 如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的块容器（block container）的内容区域（content area）的边缘建立。 如果 position 属性是 fixed，那么包含块由视口建立。 如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。 前面两条实际上都还比较好理解，第三条往往是初学者容易比较忽视的，我们来看一个示例： 1234567&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; 1234567891011121314151617181920.container &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125;.item &#123; width: 300px; height: 150px; border: 5px solid; margin-left: 100px;&#125;.item2 &#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 10px; top: 10px;&#125; 首先阅读上面的代码，然后你能在脑海里面想出其大致的样子么？或者用笔和纸画一下也行。 公布正确答案： 怎么样？有没有和你所想象的对上？ 其实原因也非常简单，根据上面的第三条规则，对于 div.item2 来讲，它的包含块应该是 div.container，而非 div.item。 如果你能把上面非根元素的包含块判定规则掌握，那么关于包含块的知识你就已经掌握 80% 了。 实际上对于非根元素来讲，包含块还有一种可能，那就是如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的： transform 或 perspective 的值不是 none will-change 的值是 transform 或 perspective filter 的值不是 none 或 will-change 的值是 filter(只在 Firefox 下生效). contain 的值是 paint (例如: contain: paint;) 我们还是来看一个示例： 1234567&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item&quot;&gt; &lt;div class=&quot;item2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 123456789101112131415161718192021.container &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125;.item &#123; width: 300px; height: 150px; border: 5px solid; margin-left: 100px; transform: rotate(0deg); /* 新增代码 */&#125;.item2 &#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 10px; top: 10px;&#125; 我们对于上面的代码只新增了一条声明，那就是 transform: rotate(0deg)，此时的渲染效果却发生了改变，如下图所示： 可以看到，此时对于 div.item2 来讲，包含块就变成了 div.item。 好了，到这里，关于包含块的知识就基本讲完了。 我们再把 CSS 规范中所举的例子来看一下。 123456789101112131415161718&lt;html&gt; &lt;head&gt; &lt;title&gt;Illustration of containing blocks&lt;/title&gt; &lt;/head&gt; &lt;body id=&quot;body&quot;&gt; &lt;div id=&quot;div1&quot;&gt; &lt;p id=&quot;p1&quot;&gt;This is text in the first paragraph...&lt;/p&gt; &lt;p id=&quot;p2&quot;&gt; This is text &lt;em id=&quot;em1&quot;&gt; in the &lt;strong id=&quot;strong1&quot;&gt;second&lt;/strong&gt; paragraph. &lt;/em&gt; &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 上面是一段简单的 HTML 代码，在没有添加任何 CSS 代码的情况下，你能说出各自的包含块么？ 对应的结果如下： 元素 包含块 html initial C.B. (UA-dependent) body html div1 body p1 div1 p2 div1 em1 p2 strong1 p2 首先 HTML 作为根元素，对应的包含块就是前面我们所说的初始包含块，而对于 body 而言，这是一个 static 定位的元素，因此该元素的包含块参照第一条为 html，以此类推 div1、p1、p2 以及 em1 的包含块也都是它们的父元素。 不过 strong1 比较例外，它的包含块确实 p2，而非 em1。为什么会这样？建议你再把非根元素的第一条规则读一下： 如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的块容器（block container）的内容区域（content area）的边缘建立。 没错，因为 em1 不是块容器，而包含块是离它最近的块容器的内容区域，所以是 p2。 接下来添加如下的 CSS： 1234#div1 &#123; position: absolute; left: 50px; top: 50px &#125; 上面的代码我们对 div1 进行了定位，那么此时的包含块会发生变化么？你可以先在自己思考一下。 答案如下： 元素 包含块 html initial C.B. (UA-dependent) body html div1 initial C.B. (UA-dependent) p1 div1 p2 div1 em1 p2 strong1 p2 可以看到，这里 div1 的包含块就发生了变化，变为了初始包含块。这里你可以参考前文中的这两句话： 初始包含块（initial containing block）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。 如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。 是不是一下子就理解了。没错，因为我们对 div1 进行了定位，因此它会应用非根元素包含块计算规则的第三条规则，寻找离它最近的 position 的值不是 static 的祖先元素，不过显然 body 的定位方式为 static，因此 div1 的包含块最终就变成了初始包含块。 接下来我们继续修改我们的 CSS： 12345678910#div1 &#123; position: absolute; left: 50px; top: 50px &#125;#em1 &#123; position: absolute; left: 100px; top: 100px &#125; 这里我们对 em1 同样进行了 absolute 绝对定位，你想一想会有什么样的变化？ 没错，聪明的你大概应该知道，em1 的包含块不再是 p2，而变成了 div1，而 strong1 的包含块也不再是 p2 了，而是变成了 em1。 如下表所示： 元素 包含块 html initial C.B. (UA-dependent) body html div1 initial C.B. (UA-dependent) p1 div1 p2 div1 em1 div1（因为定位了，参阅非根元素包含块确定规则的第三条） strong1 em1（因为 em1 变为了块容器，参阅非根元素包含块确定规则的第一条） 好了，这就是 CSS 规范中所举的例子。如果你全都能看明白，以后你还能跟别人说你是看过这一块知识对应的 CSS 规范的人。 另外，关于包含块的知识，在 MDN 上除了解说了什么是包含块以外，也举出了很多简单易懂的示例。 具体你可以移步到：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block 好了，这就是有关包含块的所有内容了，你学会了么？-） -EOF- CSS 属性计算过程你是否了解 CSS 的属性计算过程呢？ 有的同学可能会讲，CSS属性我倒是知道，例如： 123p&#123; color : red;&#125; 上面的 CSS 代码中，p 是元素选择器，color 就是其中的一个 CSS 属性。 但是要说 CSS 属性的计算过程，还真的不是很清楚。 没关系，通过此篇文章，能够让你彻底明白什么是 CSS 属性的计算流程。 首先，不知道你有没有考虑过这样的一个问题，假设在 HTML 中有这么一段代码： 123&lt;body&gt; &lt;h1&gt;这是一个h1标题&lt;/h1&gt;&lt;/body&gt; 上面的代码也非常简单，就是在 body 中有一个 h1 标题而已，该 h1 标题呈现出来的外观是如下： 目前我们没有设置该 h1 的任何样式，但是却能看到该 h1 有一定的默认样式，例如有默认的字体大小、默认的颜色。 那么问题来了，我们这个 h1 元素上面除了有默认字体大小、默认颜色等属性以外，究竟还有哪些属性呢？ 答案是该元素上面会有 CSS 所有的属性。你可以打开浏览器的开发者面板，选择【元素】，切换到【计算样式】，之后勾选【全部显示】，此时你就能看到在此 h1 上面所有 CSS 属性对应的值。 换句话说，我们所书写的任何一个 HTML 元素，实际上都有完整的一整套 CSS 样式。这一点往往是让初学者比较意外的，因为我们平时在书写 CSS 样式时，往往只会书写必要的部分，例如前面的： 123p&#123; color : red;&#125; 这往往会给我们造成一种错觉，认为该 p 元素上面就只有 color 属性。而真实的情况确是，任何一个 HTML 元素，都有一套完整的 CSS 样式，只不过你没有书写的样式，大概率可能会使用其默认值。例如上图中 h1 一个样式都没有设置，全部都用的默认值。 但是注意，我这里强调的是“大概率可能”，难道还有我们“没有设置值，但是不使用默认值”的情况么？ 嗯，确实有的，所以我才强调你要了解“CSS 属性的计算过程”。 总的来讲，属性值的计算过程，分为如下这么 4 个步骤： 确定声明值 层叠冲突 使用继承 使用默认值 确定声明值首先第一步，是确定声明值。所谓声明值就是作者自己所书写的 CSS 样式，例如前面的： 123p&#123; color : red;&#125; 这里我们声明了 p 元素为红色，那么就会应用此属性设置。 当然，除了作者样式表，一般浏览器还会存在“用户代理样式表”，简单来讲就是浏览器内置了一套样式表。 在上面的示例中，作者样式表中设置了 color 属性，而用户代理样式表（浏览器提供的样式表）中设置了诸如 display、margin-block-start、margin-block-end、margin-inline-start、margin-inline-end 等属性对应的值。 这些值目前来讲也没有什么冲突，因此最终就会应用这些属性值。 层叠冲突在确定声明值时，可能出现一种情况，那就是声明的样式规则发生了冲突。 此时会进入解决层叠冲突的流程。而这一步又可以细分为下面这三个步骤： 比较源的重要性 比较优先级 比较次序 来来来，我们一步一步来看。 比较源的重要性当不同的 CSS 样式来源拥有相同的声明时，此时就会根据样式表来源的重要性来确定应用哪一条样式规则。 那么问题来了，咱们的样式表的源究竟有几种呢？ 整体来讲有三种来源： 浏览器会有一个基本的样式表来给任何网页设置默认样式。这些样式统称用户代理样式。 网页的作者可以定义文档的样式，这是最常见的样式表，称之为页面作者样式。 浏览器的用户，可以使用自定义样式表定制使用体验，称之为用户样式。 对应的重要性顺序依次为：页面作者样式 &gt; 用户样式 &gt; 用户代理样式 更详细的来源重要性比较，可以参阅 MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade 我们来看一个示例。 例如现在有页面作者样式表和用户代理样式表中存在属性的冲突，那么会以作者样式表优先。 1234p&#123; color : red; display: inline-block;&#125; 可以明显的看到，作者样式表和用户代理样式表中同时存在的 display 属性的设置，最终作者样式表干掉了用户代理样式表中冲突的属性。这就是第一步，根据不同源的重要性来决定应用哪一个源的样式。 比较优先级那么接下来，如果是在在同一个源中有样式声明冲突怎么办呢？此时就会进行样式声明的优先级比较。 例如： 123&lt;div class=&quot;test&quot;&gt; &lt;h1&gt;test&lt;/h1&gt;&lt;/div&gt; 1234567.test h1&#123; font-size: 50px;&#125;h1 &#123; font-size: 20px;&#125; 在上面的代码中，同属于页面作者样式，源的重要性是相同的，此时会以选择器的权重来比较重要性。 很明显，上面的选择器的权重要大于下面的选择器，因此最终标题呈现为 50px。 可以看到，落败的作者样式在 Elements&gt;Styles 中会被划掉。 有关选择器权重的计算方式，不清楚的同学，可以进入此传送门：https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity 比较次序经历了上面两个步骤，大多数的样式声明能够被确定下来。但是还剩下最后一种情况，那就是样式声明既是同源，权重也相同。 此时就会进入第三个步骤，比较样式声明的次序。 举个例子： 1234567h1 &#123; font-size: 50px;&#125;h1 &#123; font-size: 20px;&#125; 在上面的代码中，同样都是页面作者样式，选择器的权重也相同，此时位于下面的样式声明会层叠掉上面的那一条样式声明，最终会应用 20px 这一条属性值。 至此，样式声明中存在冲突的所有情况，就全部被解决了。 使用继承层叠冲突这一步完成后，解决了相同元素被声明了多条样式规则究竟应用哪一条样式规则的问题。 那么如果没有声明的属性呢？此时就使用默认值么？ No、No、No，别急，此时还有第三个步骤，那就是使用继承而来的值。 例如： 123&lt;div&gt; &lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;&lt;/div&gt; 123div &#123; color: red;&#125; 在上面的代码中，我们针对 div 设置了 color 属性值为红色，而针对 p 元素我们没有声明任何的属性，但是由于 color 是可以继承的，因此 p 元素从最近的 div 身上继承到了 color 属性的值。 这里有两个点需要同学们注意一下。 首先第一个是我强调了是最近的 div 元素，看下面的例子： 12345&lt;div class=&quot;test&quot;&gt; &lt;div&gt; &lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 123456div &#123; color: red;&#125;.test&#123; color: blue;&#125; 因为这里并不涉及到选中 p 元素声明 color 值，而是从父元素上面继承到 color 对应的值，因此这里是谁近就听谁的，初学者往往会产生混淆，又去比较权重，但是这里根本不会涉及到权重比较，因为压根儿就没有选中到 p 元素。 第二个就是哪些属性能够继承？ 关于这一点的话，大家可以在 MDN 上面很轻松的查阅到。例如我们以 text-align 为例，如下图所示： 使用默认值好了，目前走到这一步，如果属性值都还不能确定下来，那么就只能是使用默认值了。 如下图所示： 前面我们也说过，一个 HTML 元素要在浏览器中渲染出来，必须具备所有的 CSS 属性值，但是绝大部分我们是不会去设置的，用户代理样式表里面也不会去设置，也无法从继承拿到，因此最终都是用默认值。 好了，这就是关于 CSS 属性计算过程的所有知识了。 一道面试题好了，学习了今天的内容，让我来用一道面试题测试测试大家的理解程度。 下面的代码，最终渲染出来的效果，a 元素是什么颜色？p 元素又是什么颜色？ 1234&lt;div&gt; &lt;a href=&quot;&quot;&gt;test&lt;/a&gt; &lt;p&gt;test&lt;/p&gt;&lt;/div&gt; 123div &#123; color: red;&#125; 大家能说出为什么会呈现这样的结果么？ 解答如下： 实际上原因很简单，因为 a 元素在用户代理样式表中已经设置了 color 属性对应的值，因此会应用此声明值。而在 p 元素中无论是作者样式表还是用户代理样式表，都没有对此属性进行声明，然而由于 color 属性是可以继承的，因此最终 p 元素的 color 属性值通过继承来自于父元素。 你答对了么？-） -EOF-","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"long","slug":"long","date":"2023-06-27T17:05:45.000Z","updated":"2023-07-02T17:48:26.388Z","comments":true,"path":"2023/06/28/long/","link":"","permalink":"http://example.com/2023/06/28/long/","excerpt":"","text":"用于实验iframe元素","categories":[],"tags":[{"name":"iframe","slug":"iframe","permalink":"http://example.com/tags/iframe/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-06-20T19:33:40.569Z","updated":"2023-06-20T19:33:40.569Z","comments":true,"path":"2023/06/21/hello-world/","link":"","permalink":"http://example.com/2023/06/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"3D建模","slug":"3D建模","permalink":"http://example.com/tags/3D%E5%BB%BA%E6%A8%A1/"},{"name":"从51到32","slug":"从51到32","permalink":"http://example.com/tags/%E4%BB%8E51%E5%88%B032/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"iframe","slug":"iframe","permalink":"http://example.com/tags/iframe/"}]}